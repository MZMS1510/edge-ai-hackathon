#!/usr/bin/env python3
"""
Communication Coach - Main Application
Sistema de an√°lise de comunica√ß√£o em tempo real
"""

import os
import sys
import time
import threading
import numpy as np
import json
import cv2
import mediapipe as mp
from datetime import datetime
from pathlib import Path
from flask import Flask, render_template, jsonify, request, Response
from flask_socketio import SocketIO, emit
from flask_cors import CORS

# Adicionar diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importar m√≥dulos core
from core.analysis import CommunicationAnalyzer
from core.camera import CameraManager
from core.report_manager import ReportManager
from utils.qualcomm_utils import QualcommUtils

app = Flask(__name__)
CORS(app)
app.config['SECRET_KEY'] = 'communication-coach-edge-ai'
socketio = SocketIO(app, cors_allowed_origins="*")

# Inst√¢ncias globais
coach_thread = None
is_coaching = False
camera_working = False

# Fun√ß√£o para resetar estado global
def reset_global_state():
    """Reseta o estado global do sistema"""
    global is_coaching, camera_working, coach_thread
    is_coaching = False
    camera_working = False
    coach_thread = None
    print("üîÑ Estado global resetado na inicializa√ß√£o")

# Resetar estado na inicializa√ß√£o
reset_global_state()

# Inicializar m√≥dulos
analyzer = CommunicationAnalyzer()
camera_manager = CameraManager()
report_manager = ReportManager()
qualcomm_utils = QualcommUtils()

# M√©tricas de comunica√ß√£o
communication_metrics = {
    'posture_score': 0,
    'gesture_score': 0,
    'eye_contact_score': 0,
    'overall_score': 0,
    'feedback': []
}

# Hist√≥rico para an√°lise final
analysis_history = {
    'start_time': None,
    'end_time': None,
    'duration': 0,
    'total_frames': 0,
    'scores_history': [],
    'improvements': [],
    'strengths': [],
    'weaknesses': [],
    'recommendations': []
}

# Rotas da API
@app.route('/')
def index():
    """P√°gina principal"""
    return render_template('communication_coach.html')

@app.route('/pitch-practice')
def pitch_practice_page():
    """P√°gina do Pitch Practice"""
    return render_template('communication_coach.html')

@app.route('/final-report')
def final_report():
    """P√°gina do relat√≥rio final"""
    return render_template('final_report.html')

@app.route('/status')
def status():
    """Status do sistema"""
    system_info = qualcomm_utils.get_system_info()
    
    return jsonify({
        'snapdragon_detected': qualcomm_utils.snapdragon_detected,
        'system_info': system_info,
        'is_coaching': is_coaching,
        'camera_working': camera_working,
        'camera_config': camera_manager.get_camera_info(),
        'tools_available': qualcomm_utils.check_qualcomm_tools(),
        'analyzer_stats': analyzer.get_analysis_stats()
    })

@app.route('/reset')
def reset_state():
    """Reseta o estado do sistema"""
    global is_coaching, camera_working, coach_thread, analysis_history
    
    try:
        print("üîÑ Resetando estado do sistema...")
        
        # Parar an√°lise se estiver ativa
        if is_coaching:
            is_coaching = False
            camera_working = False
            if coach_thread and coach_thread.is_alive():
                # Aguardar thread terminar
                try:
                    coach_thread.join(timeout=2)
                    print("‚úÖ Thread de coaching finalizada")
                except:
                    print("‚ö†Ô∏è Timeout ao aguardar thread")
        
        # Garantir que todas as vari√°veis est√£o resetadas
        is_coaching = False
        camera_working = False
        coach_thread = None
        
        # Resetar hist√≥rico
        analysis_history = {
            'start_time': None,
            'end_time': None,
            'duration': 0,
            'total_frames': 0,
            'scores_history': [],
            'improvements': [],
            'strengths': [],
            'weaknesses': [],
            'recommendations': []
        }
        
        # Resetar m√©tricas
        communication_metrics.update({
            'posture_score': 0,
            'gesture_score': 0,
            'eye_contact_score': 0,
            'overall_score': 0,
            'feedback': []
        })
        
        print("‚úÖ Estado do sistema resetado completamente")
        return jsonify({
            'success': True,
            'message': 'Estado do sistema resetado com sucesso',
            'is_coaching': is_coaching,
            'camera_working': camera_working
        })
        
    except Exception as e:
        print(f"‚ùå Erro ao resetar estado: {e}")
        # For√ßar reset mesmo em caso de erro
        is_coaching = False
        camera_working = False
        coach_thread = None
        return jsonify({'error': str(e)})

@app.route('/calibrate')
def calibrate_system():
    """Calibra o sistema de an√°lise"""
    try:
        analyzer.calibrate_system()
        return jsonify({
            'success': True,
            'message': 'Sistema calibrado com sucesso',
            'config': analyzer.config
        })
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/config', methods=['GET', 'POST'])
def manage_config():
    """Gerencia configura√ß√£o do sistema"""
    if request.method == 'POST':
        try:
            new_config = request.json
            analyzer.config.update(new_config)
            analyzer.save_config()
            return jsonify({
                'success': True,
                'message': 'Configura√ß√£o atualizada',
                'config': analyzer.config
            })
        except Exception as e:
            return jsonify({'error': str(e)})
    else:
        return jsonify({
            'config': analyzer.config,
            'stats': analyzer.get_analysis_stats()
        })

@app.route('/start_coaching')
def start_coaching():
    """Inicia an√°lise de comunica√ß√£o"""
    global coach_thread, is_coaching, camera_working, analysis_history
    
    # Verificar se j√° est√° ativo
    if is_coaching:
        print("‚ö†Ô∏è Tentativa de iniciar an√°lise j√° ativa")
        return jsonify({'error': 'An√°lise j√° est√° ativa'})
    
    # Verificar se h√° thread ativa
    if coach_thread and coach_thread.is_alive():
        print("‚ö†Ô∏è Thread de coaching ainda ativa, aguardando...")
        try:
            coach_thread.join(timeout=1)
        except:
            pass
    
    try:
        print("üöÄ Iniciando an√°lise de comunica√ß√£o...")
        
        # Garantir que o estado est√° limpo
        is_coaching = False
        camera_working = False
        coach_thread = None
        
        # Resetar hist√≥rico
        analysis_history = {
            'start_time': datetime.now().isoformat(),
            'end_time': None,
            'duration': 0,
            'total_frames': 0,
            'scores_history': [],
            'improvements': [],
            'strengths': [],
            'weaknesses': [],
            'recommendations': []
        }
        
        # Verificar c√¢mera
        camera_index = camera_manager.find_working_camera()
        if camera_index is None:
            print("‚ùå C√¢mera n√£o dispon√≠vel - an√°lise n√£o pode ser iniciada")
            return jsonify({'error': 'C√¢mera n√£o dispon√≠vel. Verifique se a c√¢mera est√° conectada e funcionando.'})
        
        camera_working = True
        
        # Iniciar thread de an√°lise
        is_coaching = True
        coach_thread = threading.Thread(target=coaching_loop, daemon=True, args=(camera_index,))
        coach_thread.start()
        
        print("‚úÖ Thread de coaching iniciada")
        return jsonify({'success': True, 'message': 'An√°lise iniciada com c√¢mera real'})
        
    except Exception as e:
        print(f"‚ùå Erro ao iniciar an√°lise: {e}")
        # Garantir que o estado seja resetado em caso de erro
        is_coaching = False
        camera_working = False
        coach_thread = None
        return jsonify({'error': f'Erro ao iniciar an√°lise: {str(e)}'})

@app.route('/stop_coaching')
def stop_coaching():
    """Para an√°lise de comunica√ß√£o e gera relat√≥rio final"""
    global is_coaching, camera_working, coach_thread, analysis_history
    
    if not is_coaching:
        return jsonify({'error': 'An√°lise n√£o est√° ativa'})
    
    try:
        print("üõë Parando an√°lise de comunica√ß√£o...")
        
        # Finalizar an√°lise
        analysis_history['end_time'] = datetime.now().isoformat()
        start_time = datetime.fromisoformat(analysis_history['start_time'])
        end_time = datetime.fromisoformat(analysis_history['end_time'])
        analysis_history['duration'] = (end_time - start_time).total_seconds()
        
        # Resetar estado global
        is_coaching = False
        camera_working = False
        
        # Aguardar thread terminar se estiver ativa
        if coach_thread and coach_thread.is_alive():
            try:
                coach_thread.join(timeout=2)
                print("‚úÖ Thread de coaching finalizada")
            except:
                print("‚ö†Ô∏è Timeout ao aguardar thread")
        
        coach_thread = None
        
        # Gerar relat√≥rio final
        print("üìä Gerando relat√≥rio final...")
        final_report = generate_final_report()
        
        # Salvar relat√≥rio
        if report_manager:
            report_manager.add_report(final_report)
        
        print("‚úÖ An√°lise finalizada com sucesso")
        return jsonify({
            'success': True, 
            'message': 'An√°lise finalizada',
            'report': final_report
        })
        
    except Exception as e:
        print(f"‚ùå Erro ao parar an√°lise: {e}")
        # Garantir que o estado seja resetado mesmo em caso de erro
        is_coaching = False
        camera_working = False
        coach_thread = None
        return jsonify({'error': f'Erro ao parar an√°lise: {str(e)}'})

@app.route('/get_communication_metrics')
def get_communication_metrics():
    """Retorna m√©tricas de comunica√ß√£o"""
    return jsonify(communication_metrics)

@app.route('/get_final_report')
def get_final_report():
    """Retorna relat√≥rio final da √∫ltima an√°lise"""
    if analysis_history['scores_history']:
        return jsonify(generate_final_report())
    else:
        return jsonify({'error': 'Nenhuma an√°lise realizada ainda'})

# Rotas da API para hist√≥rico
@app.route('/api/history')
def get_history():
    """Retorna hist√≥rico de an√°lises"""
    try:
        history = report_manager.get_all_reports()
        statistics = report_manager.get_statistics()
        
        return jsonify({
            'analyses': history,
            'statistics': statistics
        })
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/report/<report_id>')
def get_report(report_id):
    """Retorna relat√≥rio espec√≠fico"""
    try:
        report = report_manager.get_report_by_id(report_id)
        if report:
            return jsonify(report)
        else:
            return jsonify({'error': 'Relat√≥rio n√£o encontrado'})
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/report/<report_id>', methods=['DELETE'])
def delete_report(report_id):
    """Deleta relat√≥rio espec√≠fico"""
    try:
        success = report_manager.delete_report(report_id)
        if success:
            return jsonify({'success': True, 'message': 'Relat√≥rio deletado'})
        else:
            return jsonify({'error': 'Relat√≥rio n√£o encontrado'})
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/export-history')
def export_history():
    """Exporta hist√≥rico completo"""
    try:
        export_file = report_manager.export_history()
        if export_file:
            return jsonify({'success': True, 'file': export_file})
        else:
            return jsonify({'error': 'Erro ao exportar hist√≥rico'})
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/test_mediapipe')
def test_mediapipe():
    """Testa se o MediaPipe est√° funcionando"""
    try:
        import cv2
        import mediapipe as mp
        
        # Tentar inicializar a c√¢mera
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            return jsonify({'error': 'C√¢mera n√£o dispon√≠vel'})
        
        # Ler um frame
        ret, frame = cap.read()
        if not ret:
            cap.release()
            return jsonify({'error': 'N√£o foi poss√≠vel ler frame da c√¢mera'})
        
        # Inicializar MediaPipe
        mp_pose = mp.solutions.pose
        with mp_pose.Pose(
            min_detection_confidence=0.3,
            min_tracking_confidence=0.3
        ) as pose:
            # Processar frame
            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            results = pose.process(rgb_frame)
            
            # Verificar se detectou algo
            if results.pose_landmarks:
                landmarks_count = len(results.pose_landmarks.landmark)
                return jsonify({
                    'success': True,
                    'message': f'MediaPipe funcionando! Detectou {landmarks_count} landmarks de pose',
                    'landmarks_count': landmarks_count
                })
            else:
                return jsonify({
                    'success': False,
                    'message': 'MediaPipe n√£o detectou landmarks. Verifique se h√° uma pessoa na frente da c√¢mera.',
                    'landmarks_count': 0
                })
        
        cap.release()
        
    except Exception as e:
        return jsonify({'error': f'Erro ao testar MediaPipe: {str(e)}'})

def coaching_loop(camera_index):
    """Loop principal de an√°lise de comunica√ß√£o"""
    global communication_metrics, is_coaching, camera_working, analysis_history
    
    try:
        print("üé• Usando c√¢mera real...")
        real_camera_loop(camera_index)
            
    except Exception as e:
        print(f"‚ùå Erro no loop de coaching: {e}")
        print("‚ùå An√°lise interrompida - c√¢mera n√£o dispon√≠vel")

def real_camera_loop(camera_index):
    """Loop com c√¢mera real"""
    global communication_metrics, is_coaching, analysis_history
    
    try:
        # Inicializar c√¢mera
        cap = camera_manager.initialize_camera(camera_index)
        if not cap:
            raise Exception("N√£o foi poss√≠vel inicializar a c√¢mera")
        
        # Inicializar MediaPipe
        mp_pose = mp.solutions.pose
        mp_hands = mp.solutions.hands
        mp_face_mesh = mp.solutions.face_mesh
        
        with mp_pose.Pose(
            min_detection_confidence=0.3,
            min_tracking_confidence=0.3,
            model_complexity=1,
            smooth_landmarks=True
        ) as pose, mp_hands.Hands(
            min_detection_confidence=0.3,
            min_tracking_confidence=0.3,
            max_num_hands=2,
            model_complexity=1
        ) as hands, mp_face_mesh.FaceMesh(
            min_detection_confidence=0.3,
            min_tracking_confidence=0.3,
            max_num_faces=1
        ) as face_mesh:
            
            print("‚úÖ MediaPipe inicializado")
            
            frame_count = 0
            
            while is_coaching:
                try:
                    ret, frame = cap.read()
                    if not ret:
                        print("‚ùå Erro ao ler frame, tentando novamente...")
                        time.sleep(0.1)
                        continue
                    
                    frame_count += 1
                    analysis_history['total_frames'] = frame_count
                    
                    # Processar frame
                    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                    
                    # An√°lise real
                    pose_results = pose.process(rgb_frame)
                    posture_score = analyzer.analyze_posture(pose_results)
                    
                    hands_results = hands.process(rgb_frame)
                    gesture_score = analyzer.analyze_gestures(hands_results)
                    
                    face_results = face_mesh.process(rgb_frame)
                    eye_contact_score = analyzer.analyze_eye_contact(frame, face_results)
                    
                    # Debug MediaPipe a cada 30 frames
                    if frame_count % 30 == 0:
                        print(f"üéØ MediaPipe Debug: Pose={bool(pose_results.pose_landmarks)}, M√£os={len(hands_results.multi_hand_landmarks) if hands_results.multi_hand_landmarks else 0}, Rosto={len(face_results.multi_face_landmarks) if face_results.multi_face_landmarks else 0}")
                    
                    # Calcular score geral com pesos otimizados
                    overall_score = analyzer.get_overall_score(posture_score, gesture_score, eye_contact_score)
                    
                    # Salvar no hist√≥rico
                    analysis_history['scores_history'].append([
                        posture_score, gesture_score, eye_contact_score, overall_score
                    ])
                    
                    # Gerar feedback
                    feedback = analyzer.generate_feedback(posture_score, gesture_score, eye_contact_score)
                    
                    # Atualizar m√©tricas
                    communication_metrics.update({
                        'posture_score': round(posture_score, 1),
                        'gesture_score': round(gesture_score, 1),
                        'eye_contact_score': round(eye_contact_score, 1),
                        'overall_score': round(overall_score, 1),
                        'feedback': feedback
                    })
                    
                    # Enviar dados via WebSocket
                    socketio.emit('communication_data', communication_metrics)
                    
                    # Enviar landmarks para visualiza√ß√£o
                    landmarks_data = analyzer.extract_landmarks(pose_results, hands_results, face_results)
                    
                    # Debug landmarks a cada 30 frames
                    if frame_count % 30 == 0:
                        print(f"üéØ Landmarks extra√≠dos: Pose={bool(landmarks_data['pose'])}, M√£os={len(landmarks_data['hands'])}, Rosto={bool(landmarks_data['face'])}")
                    
                    socketio.emit('landmarks_data', landmarks_data)
                    
                    # Debug a cada 10 frames
                    if frame_count % 10 == 0:
                        print(f"üìä Frame {frame_count}: Postura={posture_score:.1f}, Gestos={gesture_score:.1f}, Olhos={eye_contact_score:.1f}")
                    
                    time.sleep(0.05)  # 50ms para 20 FPS
                    
                except Exception as e:
                    print(f"‚ùå Erro no processamento: {e}")
                    time.sleep(0.1)
                    
    except Exception as e:
        print(f"‚ùå Erro na c√¢mera real: {e}")
        raise e
    finally:
        try:
            cap.release()
            print("üîí C√¢mera liberada")
        except:
            pass

def generate_final_report():
    """Gera relat√≥rio final da an√°lise"""
    global analysis_history
    
    if not analysis_history['scores_history']:
        return {
            'error': 'Nenhum dado coletado para an√°lise'
        }
    
    # Calcular estat√≠sticas
    scores = np.array(analysis_history['scores_history'])
    avg_posture = float(np.mean(scores[:, 0]))
    avg_gesture = float(np.mean(scores[:, 1]))
    avg_eye_contact = float(np.mean(scores[:, 2]))
    avg_overall = float(np.mean(scores[:, 3]))
    
    # Calcular melhorias
    if len(scores) > 10:
        first_half = np.mean(scores[:len(scores)//2], axis=0)
        second_half = np.mean(scores[len(scores)//2:], axis=0)
        improvements = second_half - first_half
        # Converter para tipos Python nativos
        improvements = [float(x) for x in improvements]
    else:
        improvements = [0.0, 0.0, 0.0, 0.0]
    
    # Identificar pontos fortes e fracos
    strengths = []
    weaknesses = []
    
    if avg_posture >= 75:
        strengths.append("Postura ereta e bem alinhada")
    elif avg_posture < 50:
        weaknesses.append("Postura precisa de melhoria")
    
    if avg_gesture >= 60:
        strengths.append("Uso expressivo de gestos")
    elif avg_gesture < 40:
        weaknesses.append("Gestos limitados")
    
    if avg_eye_contact >= 75:
        strengths.append("Excelente contato visual")
    elif avg_eye_contact < 50:
        weaknesses.append("Contato visual inconsistente")
    
    # Gerar recomenda√ß√µes espec√≠ficas
    recommendations = []
    
    if avg_posture < 70:
        recommendations.append("üßò‚Äç‚ôÇÔ∏è Pratique manter os ombros alinhados e a coluna ereta")
    
    if avg_gesture < 50:
        recommendations.append("üü° Use mais gestos com as m√£os para enfatizar pontos importantes")
    
    if avg_eye_contact < 60:
        recommendations.append("üî¥ Mantenha contato visual direto com a c√¢mera/audi√™ncia")
    
    if avg_overall < 60:
        recommendations.append("üìà Considere praticar t√©cnicas de apresenta√ß√£o em p√∫blico")
    
    # Calcular progresso
    progress_indicators = []
    if improvements[0] > 5:
        progress_indicators.append("üìà Melhorou significativamente na postura")
    if improvements[1] > 5:
        progress_indicators.append("üìà Melhorou significativamente nos gestos")
    if improvements[2] > 5:
        progress_indicators.append("üìà Melhorou significativamente no contato visual")
    
    # Relat√≥rio final
    report = {
        'session_info': {
            'start_time': analysis_history['start_time'],
            'end_time': analysis_history['end_time'],
            'duration_minutes': round(analysis_history['duration'] / 60, 1),
            'total_frames': analysis_history['total_frames']
        },
        'average_scores': {
            'posture': round(avg_posture, 1),
            'gesture': round(avg_gesture, 1),
            'eye_contact': round(avg_eye_contact, 1),
            'overall': round(avg_overall, 1)
        },
        'improvements': {
            'posture': round(improvements[0], 1),
            'gesture': round(improvements[1], 1),
            'eye_contact': round(improvements[2], 1),
            'overall': round(improvements[3], 1)
        },
        'strengths': strengths,
        'weaknesses': weaknesses,
        'recommendations': recommendations,
        'progress_indicators': progress_indicators,
        'performance_level': get_performance_level(avg_overall),
        'next_steps': generate_next_steps(avg_overall, weaknesses)
    }
    
    return report

def get_performance_level(overall_score):
    """Determina n√≠vel de performance"""
    if overall_score >= 85:
        return "Excelente"
    elif overall_score >= 70:
        return "Bom"
    elif overall_score >= 55:
        return "Regular"
    else:
        return "Precisa Melhorar"

def generate_next_steps(overall_score, weaknesses):
    """Gera pr√≥ximos passos baseados na performance"""
    next_steps = []
    
    if overall_score < 70:
        next_steps.append("üßò‚Äç‚ôÇÔ∏è Pratique por 10-15 minutos diariamente")
        next_steps.append("üìö Considere um curso de orat√≥ria")
    
    if "Postura" in str(weaknesses):
        next_steps.append("üßò‚Äç‚ôÇÔ∏è Pratique exerc√≠cios de postura")
    
    if "Gestos" in str(weaknesses):
        next_steps.append("ü§≤ Treine gestos espec√≠ficos para diferentes tipos de apresenta√ß√£o")
    
    if "Contato visual" in str(weaknesses):
        next_steps.append("üëÅÔ∏è Pratique olhar para diferentes pontos da audi√™ncia")
    
    next_steps.append("üîÑ Agende uma nova sess√£o de an√°lise em 1 semana")
    
    return next_steps

# WebSocket events
@socketio.on('connect')
def handle_connect():
    """Cliente conectado"""
    print("üîå Cliente conectado via WebSocket")
    emit('status', {'message': 'Conectado ao Communication Coach'})

@socketio.on('disconnect')
def handle_disconnect():
    """Cliente desconectado"""
    print("üîå Cliente desconectado")

if __name__ == '__main__':
    print("üöÄ Iniciando Communication Coach...")
    print("üìç Acesse: http://localhost:5000")
    socketio.run(app, host='0.0.0.0', port=5000, debug=True)
