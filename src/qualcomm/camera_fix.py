#!/usr/bin/env python3
"""
Camera Fix - Solu√ß√£o para problemas de c√¢mera
Testa e configura c√¢mera para Communication Coach
"""

import cv2
import time
import platform
import subprocess
import os

def check_system_camera():
    """Verifica c√¢meras dispon√≠veis no sistema"""
    print("üîç Verificando c√¢meras do sistema...")
    
    # Verificar sistema operacional
    system = platform.system()
    print(f"üì± Sistema: {system}")
    
    if system == "Windows":
        return check_windows_camera()
    elif system == "Linux":
        return check_linux_camera()
    elif system == "Darwin":  # macOS
        return check_macos_camera()
    else:
        return check_generic_camera()

def check_windows_camera():
    """Verifica c√¢meras no Windows"""
    print("ü™ü Verificando c√¢meras Windows...")
    
    # Lista de backends para tentar
    backends = [
        cv2.CAP_DSHOW,      # DirectShow
        cv2.CAP_MSMF,       # Media Foundation
        cv2.CAP_ANY,        # Qualquer backend
        cv2.CAP_FFMPEG      # FFmpeg
    ]
    
    for backend in backends:
        print(f"üé• Testando backend: {backend}")
        
        for i in range(5):
            try:
                cap = cv2.VideoCapture(i, backend)
                if cap.isOpened():
                    ret, frame = cap.read()
                    if ret:
                        print(f"‚úÖ C√¢mera {i} funcionando com backend {backend}")
                        print(f"   Resolu√ß√£o: {frame.shape}")
                        cap.release()
                        return {'index': i, 'backend': backend, 'working': True}
                    else:
                        print(f"‚ùå C√¢mera {i} aberta mas n√£o l√™ frames")
                        cap.release()
                else:
                    print(f"‚ùå C√¢mera {i} n√£o dispon√≠vel")
            except Exception as e:
                print(f"‚ùå Erro na c√¢mera {i}: {e}")
    
    return {'working': False}

def check_linux_camera():
    """Verifica c√¢meras no Linux"""
    print("üêß Verificando c√¢meras Linux...")
    
    # Verificar se v4l2 est√° dispon√≠vel
    try:
        result = subprocess.run(['v4l2-ctl', '--list-devices'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ v4l2 dispon√≠vel")
            print(result.stdout)
    except FileNotFoundError:
        print("‚ö†Ô∏è v4l2-ctl n√£o encontrado")
    
    # Testar c√¢meras
    for i in range(5):
        try:
            cap = cv2.VideoCapture(i)
            if cap.isOpened():
                ret, frame = cap.read()
                if ret:
                    print(f"‚úÖ C√¢mera {i} funcionando")
                    print(f"   Resolu√ß√£o: {frame.shape}")
                    cap.release()
                    return {'index': i, 'backend': cv2.CAP_ANY, 'working': True}
                else:
                    print(f"‚ùå C√¢mera {i} aberta mas n√£o l√™ frames")
                    cap.release()
            else:
                print(f"‚ùå C√¢mera {i} n√£o dispon√≠vel")
        except Exception as e:
            print(f"‚ùå Erro na c√¢mera {i}: {e}")
    
    return {'working': False}

def check_macos_camera():
    """Verifica c√¢meras no macOS"""
    print("üçé Verificando c√¢meras macOS...")
    
    for i in range(5):
        try:
            cap = cv2.VideoCapture(i)
            if cap.isOpened():
                ret, frame = cap.read()
                if ret:
                    print(f"‚úÖ C√¢mera {i} funcionando")
                    print(f"   Resolu√ß√£o: {frame.shape}")
                    cap.release()
                    return {'index': i, 'backend': cv2.CAP_ANY, 'working': True}
                else:
                    print(f"‚ùå C√¢mera {i} aberta mas n√£o l√™ frames")
                    cap.release()
            else:
                print(f"‚ùå C√¢mera {i} n√£o dispon√≠vel")
        except Exception as e:
            print(f"‚ùå Erro na c√¢mera {i}: {e}")
    
    return {'working': False}

def check_generic_camera():
    """Verifica√ß√£o gen√©rica de c√¢mera"""
    print("üåê Verifica√ß√£o gen√©rica...")
    
    for i in range(5):
        try:
            cap = cv2.VideoCapture(i)
            if cap.isOpened():
                ret, frame = cap.read()
                if ret:
                    print(f"‚úÖ C√¢mera {i} funcionando")
                    print(f"   Resolu√ß√£o: {frame.shape}")
                    cap.release()
                    return {'index': i, 'backend': cv2.CAP_ANY, 'working': True}
                else:
                    print(f"‚ùå C√¢mera {i} aberta mas n√£o l√™ frames")
                    cap.release()
            else:
                print(f"‚ùå C√¢mera {i} n√£o dispon√≠vel")
        except Exception as e:
            print(f"‚ùå Erro na c√¢mera {i}: {e}")
    
    return {'working': False}

def test_camera_settings(camera_info):
    """Testa diferentes configura√ß√µes de c√¢mera"""
    if not camera_info['working']:
        return None
    
    print("üîß Testando configura√ß√µes de c√¢mera...")
    
    cap = cv2.VideoCapture(camera_info['index'], camera_info['backend'])
    
    if not cap.isOpened():
        print("‚ùå N√£o foi poss√≠vel abrir a c√¢mera")
        return None
    
    # Configura√ß√µes para testar
    configs = [
        {'width': 640, 'height': 480, 'fps': 30},
        {'width': 1280, 'height': 720, 'fps': 30},
        {'width': 1920, 'height': 1080, 'fps': 30},
        {'width': 640, 'height': 480, 'fps': 60}
    ]
    
    best_config = None
    
    for config in configs:
        print(f"üéØ Testando: {config['width']}x{config['height']} @ {config['fps']}fps")
        
        cap.set(cv2.CAP_PROP_FRAME_WIDTH, config['width'])
        cap.set(cv2.CAP_PROP_FRAME_HEIGHT, config['height'])
        cap.set(cv2.CAP_PROP_FPS, config['fps'])
        
        # Ler alguns frames para testar
        success_count = 0
        for _ in range(10):
            ret, frame = cap.read()
            if ret:
                success_count += 1
            time.sleep(0.1)
        
        if success_count >= 8:  # 80% de sucesso
            print(f"‚úÖ Configura√ß√£o funcionando: {success_count}/10 frames")
            best_config = config.copy()
            break
        else:
            print(f"‚ùå Configura√ß√£o falhou: {success_count}/10 frames")
    
    cap.release()
    return best_config

def create_camera_config(camera_info, best_config):
    """Cria arquivo de configura√ß√£o da c√¢mera"""
    config = {
        'camera_index': camera_info['index'],
        'backend': camera_info['backend'],
        'width': best_config['width'] if best_config else 640,
        'height': best_config['height'] if best_config else 480,
        'fps': best_config['fps'] if best_config else 30,
        'working': camera_info['working']
    }
    
    # Salvar configura√ß√£o
    import json
    with open('camera_config.json', 'w') as f:
        json.dump(config, f, indent=2)
    
    print("üíæ Configura√ß√£o salva em camera_config.json")
    return config

if __name__ == "__main__":
    print("üöÄ Iniciando diagn√≥stico de c√¢mera...")
    
    # Verificar c√¢meras
    camera_info = check_system_camera()
    
    if camera_info['working']:
        print("‚úÖ C√¢mera encontrada!")
        
        # Testar configura√ß√µes
        best_config = test_camera_settings(camera_info)
        
        # Criar configura√ß√£o
        config = create_camera_config(camera_info, best_config)
        
        print("\nÔøΩÔøΩ Configura√ß√£o final:")
        print(f"   √çndice: {config['camera_index']}")
        print(f"   Backend: {config['backend']}")
        print(f"   Resolu√ß√£o: {config['width']}x{config['height']}")
        print(f"   FPS: {config['fps']}")
        
    else:
        print("‚ùå Nenhuma c√¢mera funcionando encontrada")
        print("\nüí° Solu√ß√µes poss√≠veis:")
        print("   1. Verificar se a c√¢mera est√° conectada")
        print("   2. Verificar permiss√µes de c√¢mera")
        print("   3. Instalar drivers da c√¢mera")
        print("   4. Verificar se outra aplica√ß√£o est√° usando a c√¢mera")
