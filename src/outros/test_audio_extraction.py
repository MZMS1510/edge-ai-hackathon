#!/usr/bin/env python3
"""
Teste do Extrator de √Åudio

Script para testar a funcionalidade de extra√ß√£o de √°udio de v√≠deos.
Cria um v√≠deo de teste simples e testa a extra√ß√£o.
"""

import cv2
import numpy as np
import os
import subprocess
from pathlib import Path

def create_test_video(output_path="test_video.mp4", duration=5, fps=30, width=640, height=480):
    """
    Cria um v√≠deo de teste simples para demonstra√ß√£o
    
    Args:
        output_path: Caminho do v√≠deo de sa√≠da
        duration: Dura√ß√£o em segundos
        fps: Frames por segundo
        width, height: Dimens√µes do v√≠deo
    """
    print(f"üé¨ Criando v√≠deo de teste: {output_path}")
    print(f"‚è±Ô∏è  Dura√ß√£o: {duration}s, {fps} FPS, {width}x{height}")
    
    # Configurar codec
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_path, fourcc, fps, (width, height))
    
    total_frames = duration * fps
    
    for frame_num in range(total_frames):
        # Criar frame colorido com texto
        frame = np.zeros((height, width, 3), dtype=np.uint8)
        
        # Cor de fundo que muda com o tempo
        color_intensity = int(128 + 127 * np.sin(frame_num * 0.1))
        frame[:, :] = [color_intensity, 100, 200 - color_intensity]
        
        # Adicionar texto
        time_sec = frame_num / fps
        text = f"Edge AI Test Video - {time_sec:.1f}s"
        
        cv2.putText(frame, text, (50, height//2), 
                   cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
        
        # Frame counter
        counter_text = f"Frame: {frame_num}/{total_frames}"
        cv2.putText(frame, counter_text, (50, height//2 + 50), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.7, (200, 200, 200), 1)
        
        out.write(frame)
        
        # Progresso
        if frame_num % (fps * 1) == 0:  # A cada segundo
            progress = (frame_num / total_frames) * 100
            print(f"üìä Progresso: {progress:.0f}%")
    
    out.release()
    print(f"‚úÖ V√≠deo criado: {output_path}")
    
    # Adicionar √°udio com FFmpeg (opcional)
    try:
        print("üéµ Adicionando √°udio de teste...")
        temp_video = "temp_" + output_path
        os.rename(output_path, temp_video)
        
        # Comando para adicionar tom de teste
        cmd = [
            'ffmpeg', '-y',
            '-i', temp_video,
            '-f', 'lavfi', '-i', f'sine=frequency=440:duration={duration}',
            '-c:v', 'copy', '-c:a', 'aac',
            '-shortest', output_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            os.remove(temp_video)
            print("‚úÖ √Åudio adicionado com sucesso!")
        else:
            os.rename(temp_video, output_path)
            print("‚ö†Ô∏è  √Åudio n√£o adicionado (FFmpeg issue), mas v√≠deo est√° OK")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao adicionar √°udio: {e}")

def test_extraction():
    """Testa a extra√ß√£o de √°udio"""
    print("\n" + "="*60)
    print("üß™ TESTE DE EXTRA√á√ÉO DE √ÅUDIO")
    print("="*60)
    
    # Criar v√≠deo de teste se n√£o existir
    test_video = "test_video.mp4"
    if not os.path.exists(test_video):
        create_test_video(test_video, duration=3)  # V√≠deo curto para teste
    
    # Importar e testar o extrator
    try:
        import sys
        sys.path.append('.')
        from extract_audio_from_video import extract_audio_from_video, get_video_info
        
        print(f"\nüìπ Testando com: {test_video}")
        
        # Mostrar informa√ß√µes do v√≠deo
        print("\nüìä Informa√ß√µes do v√≠deo:")
        get_video_info(test_video)
        
        # Testar extra√ß√£o
        output_audio = "test_audio.wav"
        
        print(f"\nüîÑ Extraindo √°udio para: {output_audio}")
        success = extract_audio_from_video(test_video, output_audio)
        
        if success:
            print("‚úÖ TESTE PASSOU! √Åudio extra√≠do com sucesso.")
            
            # Verificar arquivo
            if os.path.exists(output_audio):
                size = os.path.getsize(output_audio)
                print(f"üìÅ Arquivo criado: {output_audio} ({size:,} bytes)")
                
                # Tentar analisar o √°udio
                try:
                    import wave
                    with wave.open(output_audio, 'rb') as wav_file:
                        frames = wav_file.getnframes()
                        sample_rate = wav_file.getframerate()
                        duration = frames / sample_rate
                        channels = wav_file.getnchannels()
                        
                        print(f"üéµ √Åudio analisado:")
                        print(f"   Dura√ß√£o: {duration:.1f}s")
                        print(f"   Sample Rate: {sample_rate} Hz")
                        print(f"   Canais: {channels}")
                        print(f"   Frames: {frames:,}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è  N√£o foi poss√≠vel analisar o √°udio: {e}")
                
            else:
                print("‚ùå Arquivo de √°udio n√£o foi criado!")
                
        else:
            print("‚ùå TESTE FALHOU! Erro na extra√ß√£o.")
            
    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulo: {e}")
    except Exception as e:
        print(f"‚ùå Erro inesperado no teste: {e}")

def cleanup():
    """Limpa arquivos de teste"""
    test_files = ["test_video.mp4", "test_audio.wav", "temp_test_video.mp4"]
    
    print("\nüßπ Limpando arquivos de teste...")
    for file in test_files:
        if os.path.exists(file):
            os.remove(file)
            print(f"üóëÔ∏è  Removido: {file}")

def main():
    print("üß™ Teste do Extrator de √Åudio - Edge AI Hackathon")
    print("="*60)
    
    # Verificar depend√™ncias
    try:
        import cv2
        print("‚úÖ OpenCV dispon√≠vel")
    except ImportError:
        print("‚ùå OpenCV n√£o encontrado! Instale com: pip install opencv-python")
        return
    
    try:
        result = subprocess.run(['ffmpeg', '-version'], 
                              capture_output=True, timeout=5)
        if result.returncode == 0:
            print("‚úÖ FFmpeg dispon√≠vel")
        else:
            print("‚ùå FFmpeg n√£o funcional")
            return
    except:
        print("‚ùå FFmpeg n√£o encontrado!")
        return
    
    # Executar teste
    test_extraction()
    
    # Perguntar se quer manter arquivos
    print("\n" + "="*60)
    keep = input("ü§î Manter arquivos de teste? (y/N): ").strip().lower()
    if keep not in ['y', 'yes', 's', 'sim']:
        cleanup()
    else:
        print("üìÅ Arquivos mantidos para an√°lise manual")
    
    print("\nüéâ Teste conclu√≠do!")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Teste interrompido")
        cleanup()
    except Exception as e:
        print(f"\nüí• Erro no teste: {e}")
